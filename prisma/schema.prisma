generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// NextAuth.js Required Models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Management Model
model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  password      String? // For credentials provider
  role          UserRole @default(CLIENT)
  department    String?
  isActive      Boolean  @default(true)
  lastLogin     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Personal Information
  fullName          String?
  dateOfBirth       DateTime?
  gender            Gender?
  maritalStatus     String?
  nationality       String?
  profileImage      String?

  // Contact Information
  mobilePrimary    String?
  homePhone        String?
  workExtension    String?
  alternativeEmail String?

  // Employment Information
  hireDate         DateTime?
  contractType     ContractType?
  employmentStatus EmploymentStatus?
  noticePeriod     Int?
  workSchedule     WorkSchedule?
  workLocation     WorkLocation?
  directManagerId  String? @db.ObjectId
  jobTitle         String?
  jobLevel         String?
  basicSalary      String?
  bonus            String?

  // Official Documents
  documentType     DocumentType? // ID_CARD, PASSPORT
  documentImage    String? // URL to document image

  // Education & Skills (Simple text fields)
  educationLevel   String?
  fieldOfStudy     String?
  generalSkills    String? // General skills as text
  generalExperience String? // General experience as text
  englishProficiency String?

  // Address (flattened)
  addressStreet    String?
  addressCity      String?
  addressCountry   String?

  // Emergency Contact (flattened)
  emergencyContactName          String?
  emergencyContactPhone         String?
  emergencyContactRelationship  String?

  // Relations
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]    @relation("TaskAssignment")
  assignedTasks Task[]    @relation("TaskAssigner")
  taskComments  TaskComment[]
  taskHistory   TaskHistory[]
  taskAttachments TaskAttachment[]
  notificationsReceived TaskNotification[] @relation("NotificationRecipient")
  notificationsSent     TaskNotification[] @relation("NotificationSender")
  
  // HR Profile Relations
  languages        Language[]
  education        Education[]
  workExperience   WorkExperience[]
  
  // WorkLog Relations
  workLogs         WorkLog[]
  reviewedWorkLogs WorkLog[] @relation("WorkLogReviewer")
  
  // Direct Manager Relations
  directManager    User?   @relation("DirectManager", fields: [directManagerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates     User[]  @relation("DirectManager")

  // Attendance Relations
  attendanceSessions Attendance[]
}

// Enhanced Task Management Models
model Task {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  status      TaskStatus   @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  type        TaskType     @default(GENERAL)
  assignedTo  String       @db.ObjectId
  assignedBy  String       @db.ObjectId
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  assignee    User        @relation("TaskAssignment", fields: [assignedTo], references: [id], onDelete: Cascade)
  assigner    User        @relation("TaskAssigner", fields: [assignedBy], references: [id], onDelete: Cascade)
  attachments TaskAttachment[]
  comments    TaskComment[]
  history     TaskHistory[]
  notifications TaskNotification[]
  workLogs    WorkLog[]
}

model TaskAttachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId    String   @db.ObjectId
  fileName  String
  fileUrl   String
  fileSize  Int
  fileType  String
  uploadedBy String  @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
}

model TaskComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId    String   @db.ObjectId
  userId    String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TaskHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId    String   @db.ObjectId
  userId    String   @db.ObjectId
  action    String   // e.g., "Status Changed", "Assigned", "Comment Added"
  oldValue  String?
  newValue  String?
  details   String?
  createdAt DateTime @default(now())

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Task Notifications
model TaskNotification {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId       String   @db.ObjectId
  type         String   // e.g., "STATUS_CHANGE", "DUE_DATE_REMINDER", "ASSIGNMENT"
  message      String
  recipientId  String   @db.ObjectId
  senderId     String   @db.ObjectId
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())
  
  // Relations
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  recipient   User     @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      User     @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
}

// Enums
enum UserRole {
  ADMIN
  STAFF
  CLIENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskType {
  GENERAL
  DEVELOPMENT
  DESIGN
  MARKETING
  SUPPORT
  BUG_FIX
  FEATURE_REQUEST
}

model contactus {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  mobile    String
  projectType String
  projectDetails String
  budget    String
  message   String
  createdAt DateTime @default(now())
}

model expressQuery {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  brief     String
  mobile    String
  createdAt DateTime @default(now())
}


model Visitor {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  ip         String   @unique
  country    String?  
  city       String?  
  region     String?  
  org        String?  
  timezone   String?  
  visitCount Int      @default(1)  // Track the number of visits
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Crombo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  company      String
  name      String
  mobile    String
  email     String
  note String
  createdAt DateTime @default(now())
}

model Price {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  mobile    String
  email     String
  packageTtype  String
  createdAt DateTime @default(now())
}

 

 

model ProjectRequest {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String
  mobile        String
  projectType   String
  projectDetails String
  budget        String
  message       String
  createdAt     DateTime @default(now())
}

// Unified model to hold all form data
model FormData {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String   // User's name
  email           String   // User's email
  phone           String   // User's phone number
  serviceType     String   // Selected service (e.g., Web Design, SEO, etc.)
  brief           String?  // Optional project description
  lastPrice       Float?   // Previous price entered by the user
  discountedPrice Float?   // Calculated discounted price
  discount        Float?   // Discount percentage used (e.g., 20 for 20%)
  agreed          Boolean? // Whether the user agreed to the price
  negotiation     Boolean? // Whether the user requested negotiation
  noPrice         Boolean? // Whether the user doesn't have a previous price
  createdAt       DateTime @default(now()) // Timestamp of submission
}

// Model for storing free consultation requests from the floating CTA
model ConsultationRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   // Full name of the visitor
  email     String   // Visitor's email address
  phone     String?  // Optional phone number
  message   String   // Consultation message
  voiceUrl  String?  // Optional Cloudinary URL for the voice message
  createdAt DateTime @default(now()) // Timestamp of submission
}

model NewsletterSubscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique // Email address (unique to prevent duplicates)
  isActive  Boolean  @default(true) // Whether the subscription is active
  createdAt DateTime @default(now()) // Timestamp of subscription
  updatedAt DateTime @updatedAt // Timestamp of last update
}

model JobApplication {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  applicationNumber String   @unique @default(cuid())
  fullName          String
  email             String
  phone             String
  age               Int
  gender            String
  areaOfExpertise   String
  yearsOfExperience Int
  aboutYou          String
  attachmentUrl     String?
  attachmentName    String?
  status            ApplicationStatus @default(DRAFT)
  submittedAt       DateTime?
  locale            String @default("en")
  ipAddress         String?
  userAgent         String?
  source            String?
  adminNotes        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relation to status history
  statusHistory     ApplicationStatusHistory[]
}

model ApplicationStatusHistory {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  applicationId     String   @db.ObjectId
  status            ApplicationStatus
  notes             String?
  changedBy         String?  // Admin who made the change
  changedAt         DateTime @default(now())
  
  // Relation to application
  application       JobApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

// HR Profile Supporting Models
// Removed EmergencyContact and Address models – flattened into User

// Removed Skill model – using User.generalSkills instead

model Language {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  language    String
  proficiency LanguageProficiency
  certified   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  degree      String
  institution String
  field       String
  startDate   DateTime
  endDate     DateTime?
  gpa         Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkExperience {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Staff Productivity Tracking
model WorkLog {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @db.ObjectId
  title           String
  summary         String
  timeSpentMin    Int
  status          WorkLogStatus @default(PENDING)
  taskId          String?     @db.ObjectId // Optional link to a task
  adminNotes      String?     // Notes from admin review
  reviewedBy      String?     @db.ObjectId // Admin who reviewed
  reviewedAt      DateTime?   // When it was reviewed
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  task            Task?       @relation(fields: [taskId], references: [id], onDelete: SetNull)
  reviewer        User?       @relation("WorkLogReviewer", fields: [reviewedBy], references: [id], onDelete: SetNull)
}

// Attendance tracking for login/logout
model Attendance {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  loginAt      DateTime
  logoutAt     DateTime?
  durationMin  Int?
  source       String
  ip           String?
  userAgent    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, loginAt])
}

// Add WorkLogStatus enum
enum WorkLogStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  INTERVIEW_SCHEDULED
  INTERVIEWED
  OFFER_EXTENDED
  HIRED
  REJECTED
  WITHDRAWN
}

// HR Profile Enums
enum Gender {
  MALE
  FEMALE
}

enum AddressType {
  CURRENT
  PERMANENT
}

enum ContractType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum EmploymentStatus {
  ACTIVE
  INACTIVE
}

enum WorkSchedule {
  FLEXIBLE
  FIXED
}

enum WorkLocation {
  OFFICE
  REMOTE
  HYBRID
}

enum DocumentType {
  ID_CARD
  PASSPORT
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LanguageProficiency {
  BASIC
  INTERMEDIATE
  ADVANCED
  FLUENT
}
